version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.11.4
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      # - image: circleci/postgres:9.6-alpine
      #   environment: # environment variables for primary container
      #     POSTGRES_USER: circleci-demo-go
      #     POSTGRES_DB: circle_test

    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/gitlab.com/purini-to/stack_code_cov

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved
      GO111MODULE: "on"

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - v1-pkg-cache

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of explanation.
      - run: go get golang.org/x/tools/cmd/cover
      - run: go get github.com/mattn/goveralls

      #  CircleCi's Go Docker image includes netcat
      #  this allows polling the DB port to confirm it is open before proceeding
      # - run:
      #     name: Waiting for Postgres to be ready
      #     command: |
      #       for i in `seq 1 10`;
      #       do
      #         nc -z localhost 5432 && echo Success && exit 0
      #         echo -n .
      #         sleep 1
      #       done
      #       echo Failed waiting for Postgres && exit 1

      - run:
          name: Run unit tests
          # environment: # environment variables for the database url and path to migration files
          #   CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
          #   CONTACTS_DB_MIGRATIONS: /go/src/github.com/CircleCI-Public/circleci-demo-go/db/migrations

          # store the results of our tests in the $TEST_RESULTS directory
          command: |
              go fmt $(go list ./... | grep -v /vendor/)
              go vet $(go list ./... | grep -v /vendor/)
              go test -v -cover -race $(go list ./... | grep -v /vendor/) -coverprofile=$TEST_RESULTS/coverage.out -covermode=atomic
              echo $COVERALLS_REPO_TOKEN
              echo $COVERALLS_SERVICE_NAME
              $GOPATH/bin/goveralls -coverprofile=$TEST_RESULTS/coverage.out -service=$COVERALLS_SERVICE_NAME -repotoken $COVERALLS_REPO_TOKEN
              
      - run: go build -race -ldflags "-extldflags '-static'" -o bin/stack_code_cov # pull and build dependencies for the project

      - save_cache: # store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/pkg"

      # - run:
      #     name: Start service
      #     environment:
      #       CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
      #       CONTACTS_DB_MIGRATIONS: /go/src/github.com/CircleCI-Public/circleci-demo-go/db/migrations
      #     command: ./workdir/contacts
      #     background: true # keep service running and proceed to next step

      # - run:
      #     name: Validate service is working
      #     command: |
      #       sleep 5
      #       curl --retry 10 --retry-delay 1 -X POST --header "Content-Type: application/json" -d '{"email":"test@example.com","name":"Test User"}' http://localhost:8080/contacts

      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results